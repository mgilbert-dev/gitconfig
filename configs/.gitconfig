[user]
    email = brauliobo@gmail.com
    name = Braulio Bhavamitra

[sendemail]
    smtpencryption = tls
    smtpserver = smtp.gmail.com
    smtpuser = brauliobo@gmail.com
    smtpserverport = 587

[alias]
    root = rev-parse --show-toplevel
    #cdroot = !cd `git root`

    out = log --branches --not --remotes
    in = pull --dry-run

    co = checkout
    coc = checkout .
    cob = checkout -b
    col = checkout HEAD~1

    ours = checkout --ours
    theirs = checkout --theirs
    aours = "!f() { (git reset $* >/dev/null); git ours $* && git add $*; }; f"
    atheirs = "!f() { (git reset $* >/dev/null); git theirs $* && git add $*; }; f"

    ci = commit
    cia = commit -a
    cam = commit --amend

    cl = clean
    cldf = clean -df

    res = reset
    resa = reset HEAD
    resh = reset --hard
    reshh = reset --hard HEAD
    cundo = reset HEAD^1
    cundoh = reset HEAD^1 --hard
    unstage = reset HEAD

    tags = tag -l

    s = show --color
    sf = show --color --name-only

    d = diff --color
    dw = diff --color -w
    ds = diff --color --staged
    dsf = diff --color --staged --name-only
    df = diff --color --name-only

    f = fetch
    fa = fetch --all
    fo = fetch origin

    m = merge
    unm = reset --merge

    ps = push
    psf = push -f
    pso = push origin

    pl = pull
    plr = pull --rebase

    st = status

    unmerged = !git ls-files --unmerged | cut -f2 | uniq
    untracked = ls-files --other --exclude-standard
    staged = ls-files --staged
    modified = ls-files --modified
    deleted = ls-files --deleted
    gitignored = ls-files -o -i --exclude-standard
    sig = !git ls-files -v | grep "^[[:lower:]]"

    ig = update-index --assume-unchanged
    uig = update-index --no-assume-unchanged
    ignore = update-index --assume-unchanged
    ignored = !git sig

    gitignore-untracked = !git gitignore `git untracked`
    ig-untracked = !git ignore `git untracked`
    gitignore = !cd `git root` && touch .gitignore

    lp = log -p --color
    lf = log -p --name-only --color
    lnom = log --color --no-merges
    lg = log --graph --pretty=format:'%Cred%h%Creset %s %Cgreen(%cr) %Cblue%an <%ae>%Creset' --abbrev-commit --date=relative
    lg2 = !source ~/.githelpers && pretty_git_log
    lgp = !git lg -p --color
    lgf = !git lg -p --name-only --color
    l = log --pretty=format:'%Cred%h%Creset %s %Cgreen(%cr) %Cblue%an <%ae>%Creset' --abbrev-commit --date=relative
    lc = "!f() { git log $* | grep '^commit ' | cut -f 2 -d ' '; }; f"

    head = !git l -1
    h = !git head
    hp = !source ~/.githelpers && show_git_head
    r = !git l -20
    ra = !git r --all

    pg = diff
    pgs = diff --staged
    pa = apply

    sh = stash
    sha = stash apply
    shl = stash list
    shc = stash clear

    chp = cherry-pick
    chpc = cherry-pick --continue
    chpq = cherry-pick --quit
    chpa = cherry-pick --abort

    a = add
    as = !git diff -w --no-color | git apply --cached
    ap = add -p
    resolve-unmerged = !git add `git unmerged`
    add-untracked = !git add `git untracked`

    rs = !(git resa && git as && git co . && git resa) &>/dev/null

    am3 = am -3
    amr = am --resolved
    amc = am --continue
    ama = am --abort
    ams = am --skip

    fm = format-patch
    
    rmf = rm -rf

    rb = rebase
    rbi = rebase -i
    rbc = rebase --continue
    rba = rebase --abort
    rbs = rebase --skip

    mt = mergetool

    vm = !vim `git unmerged`
    vmo = !vim `git modified`
    vt = !vim `git untracked`
    vim-unmerged = !git vm # deprecated

    b = branch
    ba = branch -a
    bd = branch -D
    contains = branch --contains

    rem = remote
    rema = remote add
    remr = remote rm
    remotes = remote -v

    sm = submodule
    sma = submodule add
    smu = submodule update
    smui = submodule update --init
    sms = submodule sync

    bl = blame

    gcp = gc --prune=now
    gca = gc --aggressive
    gcap = gc --aggressive --prune=now

    # git change-commits GIT_COMMITTER_NAME "old name" "new name"
    change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ $`echo $VAR` = \\\"$OLD\\\" ]]; then export $VAR=\\\"$NEW\\\"; fi\" $@; }; f "
    # from https://help.github.com/articles/remove-sensitive-data
    remove-file ="git filter-branch --index-filter 'git rm --cached --ignore-unmatch $1' --prune-empty --tag-name-filter cat -- --all"

    rf = reflog
    rfe = reflog expire --expire=now --all

[apply]
    ignorewhitespace = change
    whitespace = nowarn

[color]
    interactive = true
    branch = true
    status = true

[core]
    pager = less -iRS

[pager]
    diff = true
    status = true
    show-branch = true

[mergetool "vimdiff3"]
    cmd = vim -u ~/.vimrc -f -d -c \"wincmd J\" \"$MERGED\" \"$LOCAL\" \"$BASE\" \"$REMOTE\"
